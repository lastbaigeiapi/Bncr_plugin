/**
 * @author 啊屁
 * @team 啊屁
 * @name Aria2 push
 * @version 1.0.4
 * @description 管理Aria2下载任务
 * @rule ^(magnet:\?xt=urn:btih:[a-zA-Z0-9]+)
 * @rule ^(下载中|等待中|已完成|暂停任务|恢复任务|删除任务)$
 * @admin true
 * @public false
 * @priority 50
 */

const axios = require('axios');

// Aria2 JSON-RPC HTTP 配置
const ARIA2_RPC_URL = 'http://ip:port/jsonrpc';
const ARIA2_SECRET = 'prc token';

// 辅助函数
function byte2Readable(bytes, suffix = '') {
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    if (bytes === 0) return '0 B' + suffix;
    const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)), 10);
    if (i === 0) return `${bytes} ${sizes[i]}${suffix}`;
    return `${(bytes / (1024 ** i)).toFixed(1)} ${sizes[i]}${suffix}`;
}

function progress(total, completed) {
    if (total === '0') return '0%';
    return `${(completed / total * 100).toFixed(2)}%`;
}

function getFilename(task) {
    return task.files[0]?.path.split('/').pop() || task.bittorrent?.info?.name || 'Unknown';
}

// Aria2 HTTP JSON-RPC 调用函数
function aria2Call(method, params = []) {
    return axios.post(ARIA2_RPC_URL, {
        jsonrpc: '2.0',
        method: `aria2.${method}`,
        id: Date.now().toString(),
        params: [`token:${ARIA2_SECRET}`, ...params]
    }).then(response => {
        if (response.data.error) {
            throw new Error(response.data.error.message);
        }
        return response.data.result;
    });
}

// 主函数
module.exports = async (sender) => {
    const msg = sender.getMsg();

    // 处理磁力链接
    if (msg.startsWith('magnet:?xt=urn:btih:')) {
        try {
            await aria2Call('addUri', [[msg]]);
            await sender.reply('已添加下载任务');
        } catch (error) {
            await sender.reply('添加下载任务失败：' + error.message);
        }
    }

    // 查看当前下载任务
    else if (msg === '下载中') {
        try {
            const tasks = await aria2Call('tellActive');
            await sendTaskList(sender, tasks, '当前下载中的任务');
        } catch (error) {
            await sender.reply('获取下载任务失败：' + error.message);
        }
    }

    // 查看等待中的任务
    else if (msg === '等待中') {
        try {
            const tasks = await aria2Call('tellWaiting', [0, 100]);
            await sendTaskList(sender, tasks, '等待中的任务');
        } catch (error) {
            await sender.reply('获取等待任务失败：' + error.message);
        }
    }

    // 查看已完成的任务
    else if (msg === '已完成') {
        try {
            const tasks = await aria2Call('tellStopped', [0, 100]);
            await sendTaskList(sender, tasks, '已完成或停止的任务');
        } catch (error) {
            await sender.reply('获取完成任务失败：' + error.message);
        }
    }

    // 暂停任务
    else if (msg === '暂停任务') {
        await handleTaskOperation(sender, 'pause', '暂停任务');
    }

    // 恢复任务
    else if (msg === '恢复任务') {
        await handleTaskOperation(sender, 'unpause', '恢复任务');
    }

    // 删除任务
    else if (msg === '删除任务') {
        await handleTaskOperation(sender, 'remove', '删除任务');
    }

    return 'next';
};

async function sendTaskList(sender, tasks, title) {
    if (tasks.length === 0) {
        await sender.reply(`没有${title}`);
    } else {
        const taskList = tasks.map((task, index) => {
            const fileName = getFilename(task);
            const totalLength = Number(task.totalLength);
            const completedLength = Number(task.completedLength);
            const downloadSpeed = Number(task.downloadSpeed);
            return [
                `任务${index + 1}: ${fileName.substring(0, 15)}...`,
                `大小: ${byte2Readable(totalLength)}`,
                `进度: ${progress(totalLength, completedLength)}`,
                `速度: ${byte2Readable(downloadSpeed, '/s')}`,
            ].join('\n');
        }).join('\n\n');
        await sender.reply(`${title}：\n${taskList}`);
    }
}

async function handleTaskOperation(sender, operation, operationName) {
    try {
        const tasks = await aria2Call('tellActive');
        if (tasks.length === 0) {
            await sender.reply('当前没有可操作的任务');
        } else {
            const taskList = tasks.map((task, index) => `任务${index + 1}: ${getFilename(task).substring(0, 15)}...`).join('\n');
            await sender.reply(`当前任务列表：\n${taskList}\n\n请回复要${operationName}的任务序号或输入'q'退出`);
            const response = await sender.waitInput(() => {}, 30);
            if (response) {
                const userInput = response.getMsg().trim().toLowerCase();
                if (userInput === 'q') {
                    await sender.reply('操作已取消');
                    return;
                }
                const taskIndex = parseInt(userInput) - 1;
                if (taskIndex >= 0 && taskIndex < tasks.length) {
                    const task = tasks[taskIndex];
                    if (operation === 'pause') {
                        await aria2Call('pause', [task.gid]);
                    } else if (operation === 'unpause') {
                        await aria2Call('unpause', [task.gid]);
                    } else if (operation === 'remove') {
                        await aria2Call('remove', [task.gid]);
                    }
                    await sender.reply(`已${operationName}: ${getFilename(task)}`);
                } else {
                    await sender.reply('无效的任务序号');
                }
            } else {
                await sender.reply('操作超时');
            }
        }
    } catch (error) {
        await sender.reply(`获取任务失败：${error.message}`);
    }
}
